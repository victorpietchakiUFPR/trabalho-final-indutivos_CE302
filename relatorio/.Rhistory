title = "Duração dos Acidentes por Severidade",
x = "Severidade",
y = "Duração (minutos)"
) +
scale_y_continuous(limits = quantile(acidentes_US_sample$Duration_minutes, c(0.0, 0.9)))+
theme_minimal()
leaflet() %>%
addTiles() %>%
addPolygons(
data = acidentes_p_estado,
fillColor = ~palestado(n),
weight = 2,
color = "black",
fillOpacity = 0.4,
label = ~NAME,
popup = ~glue("<b>Estado: </b> {NAME}<br><b>Quantidade de acidentes: </b> {n}"),
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.6,
bringToFront = TRUE
),
group = "Nível estadual"
) %>%
addLegend(
"bottomright",
pal = palestado,
values = acidentes_p_estado$n,
title = "Número de Acidentes",
opacity = 1,
group = "Nível estadual"
) %>%
addHeatmap(
data = mapa_de_calor,
lng = ~`Start Lng`,
lat = ~`Start Lat`,
intensity = ~n,
blur = 20,
radius = 15,
group = "Mapa de calor"
) %>%
addLayersControl(
baseGroups = c("Nível estadual", "Mapa de calor"),
position = "topright"
)
leaflet() %>%
addTiles() %>%
addPolygons(
data = acidentes_p_estado,
fillColor = ~palestado(n),
weight = 2,
color = "black",
fillOpacity = 0.4,
label = ~NAME,
popup = ~glue("<b>Estado: </b> {NAME}<br><b>Quantidade de acidentes: </b> {n}"),
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.6,
bringToFront = TRUE
),
group = "Nível estadual"
) %>%
addLegend(
"bottomright",
pal = palestado,
values = acidentes_p_estado$n,
title = "Número de Acidentes",
opacity = 1,
group = "Nível estadual"
) %>%
addHeatmap(
data = mapa_de_calor,
lng = ~`Start Lng`,
lat = ~`Start Lat`,
intensity = ~n,
blur = 20,
radius = 15,
group = "Mapa de calor"
) %>%
addLayersControl(
baseGroups = c("Nível estadual", "Mapa de calor"),
position = "topright"
)
#| label: matriz de calor (faixa horaria e dia da semana)
#| eval: false
# Cria uma matriz de calor para as variaveis dias da semana e faixa horaria
acidentes_data_matriz_AWKTR <- acidentes_US_sample_date[Civil_Twilight == "Day" | Civil_Twilight == "Night", .N, by = .(Weekday, Time_Range)] %>%
setorder(Weekday, -Time_Range) %>% # order data set increasingly by weekday and time range
as.data.frame() %>% # Transforming data.table into data.frame
ggplot() +
aes(x = Weekday, y = Time_Range, fill = N) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkred") +
labs(title = "Agenda Diaria de Acidentes", x = "Dia da Semana", y = "Horario") +
theme_minimal() +
scale_x_discrete(position = "top") +
theme(
axis.title.x.top = element_text(),
axis.text.x.top = element_text(),
axis.line.x.top = element_line(),
axis.ticks.x.top = element_line()
)
acidentes_data_matriz_AWKTR
#| echo: false
#| message: false
library(tidyverse)
library(shiny)
require(data.table)
require(tidyverse)
require(leaflet)
require(leaflet.extras)
require(leaflet.extras2)
require(sf)
require(glue)
require(htmltools)
library(dplyr)
library(bs4Dash)
library(readxl)
library(plotly)
library(DT)
require(scales)
library(hrbrthemes)
library(magrittr)
library(tidyverse)
library(lubridate)
library(corrplot)
#| label: lendo dados
# Carrega os dados originais
# load("../../99_dados/acidentes_US.RData")
load("../../99_dados/acidentes_US_sample.RData")
# load("../../99_dados/acidentes_US_date.RData")
load("../../99_dados/acidentes_US_date_sample.RData")
st_read("../../99_dados/Estados_US/tl_2024_us_state.shp")
acidentes_US_sample %>% class()
#| label: conferindo a estrutura de elementos do objeto
acidentes_US_sample %>% glimpse()
#| label: verificando as primeiras observações
acidentes_US_sample %>% head(10)
#Agrupando valores parecidos em 'Weather Condition'.
acidentes_US_sample <- acidentes_US_sample %>%
mutate(Weather_Cluster = case_when(
grepl("Rain|Drizzle|Shower|Showers|Light Rain|Heavy Rain|Rain Showers|Light Rain Showers|Rain and Sleet|Rain Shower|Rain / Windy|Rain Showers", Weather_Condition, ignore.case = TRUE) ~ "Rain",
grepl("Snow|Blowing Snow|Light Snow|Heavy Snow|Snow Grains|Snow Showers|Snow and Thunder|Snow / Windy|Blowing Snow / Windy|Light Snow Shower|Heavy Snow / Windy|Heavy Snow with Thunder|Snow and Sleet", Weather_Condition, ignore.case = TRUE) ~ "Snow",
grepl("Thunder|Tornado|Thunderstorm|Light Thunderstorm|Heavy Thunderstorms and Rain|Thunder / Windy|Thunder / Wintry Mix|Thunderstorms and Snow|Light Thunderstorms and Snow|Heavy Thunderstorms with Small Hail", Weather_Condition, ignore.case = TRUE) ~ "Thunderstorm",
grepl("Wind|Windy|Blowing Dust|Blowing Snow|Duststorm|Dust Whirls|Blowing Dust / Windy|Widespread Dust|Sand / Windy|Windy", Weather_Condition, ignore.case = TRUE) ~ "Wind",
grepl("Fog|Haze|Shallow Fog|Patches of Fog|Mist|Light Fog|Fog / Windy|Partial Fog", Weather_Condition, ignore.case = TRUE) ~ "Fog",
grepl("Clear|Fair|Mostly Cloudy|Partly Cloudy|Overcast|Cloudy", Weather_Condition, ignore.case = TRUE) ~ "Clear",
grepl("Smoke|Volcanic Ash|Haze", Weather_Condition, ignore.case = TRUE) ~ "Hazardous",
grepl("Sleet|Ice Pellets|Freezing Rain|Light Freezing Rain|Freezing Drizzle|Light Freezing Drizzle|Heavy Freezing Rain", Weather_Condition, ignore.case = TRUE) ~ "Ice",
grepl("Squalls|Hail|Small Hail|Thunder / Wintry Mix|Hail", Weather_Condition, ignore.case = TRUE) ~ "Hail",
grepl("Mist|Blowing Snow Nearby|Sand|Blowing Snow", Weather_Condition, ignore.case = TRUE) ~ "Dust & Mist",
grepl("Volcanic Ash|Blowing Sand|Sand", Weather_Condition, ignore.case = TRUE) ~ "Dust Storm",
grepl("Fair / Windy|Fair", Weather_Condition, ignore.case = TRUE) ~ "Fair / Windy",
TRUE ~ "Other"
))
acidentes_US_sample <- acidentes_US_sample %>%
mutate(Choveu = ifelse(`Precipitation(in)` > 0, "Sim", "Não"))
#| label: pré-processando as variaveis do grupo 'Condiçoes de Infraestrutura e Sinalização'
# Seleciona as variáveis de interesse
poi <- acidentes_US_sample[, .(Severity, Start_Time, City, State, `Temperature(F)`,
Amenity, Bump, Crossing, Give_Way, Junction, No_Exit,
Railway, Roundabout, Station, Stop, Traffic_Calming,
Traffic_Signal, Turning_Loop)]
# Cria duas seleções de dados, contando a quantidade de acidentes com e sem cada ponto de interesse.
poi_true <- poi %>%
select(Amenity:Turning_Loop) %>%
pivot_longer(Amenity:Turning_Loop, names_to = "PoI") %>%
filter(value == 1) %>%
group_by(PoI) %>%
summarise(t = n()) %>%
arrange(desc(t))
poi_false <- poi %>%
select(Amenity:Turning_Loop) %>%
pivot_longer(Amenity:Turning_Loop, names_to = "PoI") %>%
filter(value == FALSE) %>%
group_by(PoI) %>%
summarise(f = n()) %>%
arrange(f)
# Cria uma nova coluna com a soma dos pontos de interesse
poi_sum <- poi[, PoI_Sum := rowSums(.SD), .SDcols = c("Amenity", "Bump","Crossing", "Give_Way", "Junction", "No_Exit", "Railway", "Roundabout", "Station",
"Stop", "Traffic_Calming",
"Traffic_Signal", "Turning_Loop")]
acidentes_US_sample <- acidentes_US_sample %>%
mutate(Duration_minutes = as.numeric(difftime(End_Time, Start_Time, units = "mins")))
leaflet() %>%
addTiles() %>%
addPolygons(
data = acidentes_p_estado,
fillColor = ~palestado(n),
weight = 2,
color = "black",
fillOpacity = 0.4,
label = ~NAME,
popup = ~glue("<b>Estado: </b> {NAME}<br><b>Quantidade de acidentes: </b> {n}"),
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.6,
bringToFront = TRUE
),
group = "Nível estadual"
) %>%
addLegend(
"bottomright",
pal = palestado,
values = acidentes_p_estado$n,
title = "Número de Acidentes",
opacity = 1,
group = "Nível estadual"
) %>%
addHeatmap(
data = mapa_de_calor,
lng = ~`Start Lng`,
lat = ~`Start Lat`,
intensity = ~n,
blur = 20,
radius = 15,
group = "Mapa de calor"
) %>%
addLayersControl(
baseGroups = c("Nível estadual", "Mapa de calor"),
position = "topright"
)
leaflet() %>%
addTiles() %>%
addPolygons(
data = acidentes_p_estado,
fillColor = ~palestado(n),
weight = 2,
color = "black",
fillOpacity = 0.4,
label = ~NAME,
popup = ~glue("<b>Estado: </b> {NAME}<br><b>Quantidade de acidentes: </b> {n}"),
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.6,
bringToFront = TRUE
),
group = "Nível estadual"
) %>%
addLegend(
"bottomright",
pal = palestado,
values = acidentes_p_estado$n,
title = "Número de Acidentes",
opacity = 1,
group = "Nível estadual"
) %>%
addHeatmap(
data = mapa_de_calor,
lng = ~`Start Lng`,
lat = ~`Start Lat`,
intensity = ~n,
blur = 20,
radius = 15,
group = "Mapa de calor"
) %>%
addLayersControl(
baseGroups = c("Nível estadual", "Mapa de calor"),
position = "topright"
)
#| label: pré-processando as variaveis de localizacao
#| eval: false
# Alterando o nome, para não ter que alterar todas as variáveis após
acidentes_arredondado <- acidentes_US_sample
# Shapefiles
estados <- st_read("../../99_dados/Estados_US/tl_2024_us_state.shp")
# Arredondando latitudes e longitudes
acidentes_arredondado$`Start Lat` <- round(acidentes_arredondado$`Start Lat`,2)
#| echo: false
#| message: false
library(tidyverse)
library(shiny)
require(data.table)
require(tidyverse)
require(leaflet)
require(leaflet.extras)
require(leaflet.extras2)
require(sf)
require(glue)
require(htmltools)
library(dplyr)
library(bs4Dash)
library(readxl)
library(plotly)
library(DT)
require(scales)
library(hrbrthemes)
library(magrittr)
library(tidyverse)
library(lubridate)
library(corrplot)
#| label: lendo dados
# Carrega os dados originais
# load("../../99_dados/acidentes_US.RData")
load("../../99_dados/acidentes_US_sample.RData")
# load("../../99_dados/acidentes_US_date.RData")
load("../../99_dados/acidentes_US_date_sample.RData")
st_read("../../99_dados/Estados_US/tl_2024_us_state.shp")
acidentes_US_sample %>% class()
#| label: conferindo a estrutura de elementos do objeto
acidentes_US_sample %>% glimpse()
#| label: verificando as primeiras observações
acidentes_US_sample %>% head(10)
#| label: pré-processando as variaveis do grupo 'Tempo'
#| eval: false
# Seleciona as variaveis de 'Tempo'
acidentes_US_date <- acidentes_US_sample[, .(ID, Severity, `Start Time`, `End Time`, `Civil Twilight`)]
#| label: pré-processando as variaveis do grupo 'Tempo'
#| eval: false
# Seleciona as variaveis de 'Tempo'
acidentes_US_date <- acidentes_US_sample[, .(ID, Severity, Start_Time, End_Time, Civil_Twilight)]
acidentes_US_date <- acidentes_US_sample[, `:=`(Start_Time = Start_Time,
End_Time = End_Time,
Civil_Twilight = Civil_Twilight)]
acidentes_US_date <- acidentes_US_date[, .(ID, Severity, Start_Time, End_Time, Civil_Twilight)]
#| label: criando novas variaveis
#| echo: false
#| eval: false
# Extrai separadamente informaçoes de data, hora, ano, mes, dia e dia da semana a partir do Start_Time
acidentes_US_date[, `:=`(
Date = as.Date(Start_Time),
Hour = hour(Start_Time),
Year = year(Start_Time),
Month = sprintf("%02d", month(Start_Time)),
Day = day(Start_Time),
Weekday = wday(Start_Time)
)]
# Cria uma nova variavel categorica Ano-Mes e Tipo de Dia (final de semana ou nao)
acidentes_US_date[, `:=`(Year_Month = paste0(Year, "-", Month),
`Tipo de Dia` = ifelse(Weekday == "dom" | Weekday == "sáb", "Final de semana", "Dia da semana")),]
# Ordena os dias da semana (já categorizados automaticamente pelo wday) e transforma em fator
weekday_order <- c("seg", "ter", "qua", "qui", "sex", "sáb", "dom")
acidentes_US_date[, Weekday := factor(Weekday, levels = weekday_order)]
# 1.3.3 Cria a variavel categorica Time_Range de forma programática
acidentes_US_date[, Time_Range := sprintf("%02d:00:00", Hour)]
# Ordenar Time_Range como fator
time_range_order <- sprintf("%02d:00:00", 23:0)
acidentes_US_date[, Time_Range := factor(Time_Range, levels = time_range_order)]
# Transforma a variavel 'Duration' em minutos
acidentes_US_date[, Duration := round(as.numeric(difftime(End_Time, Start_Time, units = "mins")))]
# Remover coluna End_Time
acidentes_US_date[, End_Time := NULL] # Remove a coluna 'End_Time' (nao sera utilizada)
# Salva a tabela 'acidentes_US_date' em um arquivo '.RData'
# linha de codigo abaixo comentada para evitar re-execucao (arquivo ja esta salvo na pasta
save(acidentes_US_date, file = "acidentes_US_date.RData")
# Exibe as primeiras observacoes da tabela 'acidentes_US_date'
acidentes_US_date %>% head(10)
acidentes_US_date <- acidentes_US_sample_date
#| label: pré-processando as variaveis de localizacao
#| eval: false
# Alterando o nome, para não ter que alterar todas as variáveis após
acidentes_arredondado <- acidentes_US_sample
# Shapefiles
estados <- st_read("../../99_dados/Estados_US/tl_2024_us_state.shp")
# Arredondando latitudes e longitudes
acidentes_arredondado$`Start Lat` <- round(acidentes_arredondado$`Start Lat`,2)
#| label: pré-processando as variaveis de localizacao
#| eval: false
# Alterando o nome, para não ter que alterar todas as variáveis após
acidentes_arredondado <- acidentes_US_sample
# Shapefiles
estados <- st_read("../../99_dados/Estados_US/tl_2024_us_state.shp")
# Arredondando latitudes e longitudes
acidentes_arredondado$Start_Lat <- round(acidentes_arredondado$`Start Lat`,2)
#| label: pré-processando as variaveis de localizacao
#| eval: false
# Alterando o nome, para não ter que alterar todas as variáveis após
acidentes_arredondado <- acidentes_US_sample
# Shapefiles
estados <- st_read("../../99_dados/Estados_US/tl_2024_us_state.shp")
# Arredondando latitudes e longitudes
acidentes_arredondado$Start_Lat <- round(acidentes_arredondado$Start_Lat,2)
acidentes_arredondado$Start_Lng <- round(acidentes_arredondado$Start_Lng,2)
# Alterando a base shp para facilitar o entendimento
nomeestados <- as.data.frame(estados) %>% select(STUSPS,NAME)
names(nomeestados) <- c("STUSPS","NOMEESTADO")
# Juntando as informações já tratadas
acidentes <- left_join(acidentes_arredondado,nomeestados, by = c("State"="STUSPS"))
acidentes_p_estado <- acidentes %>%
group_by(State, NOMEESTADO) %>%
summarise(n = n(), .groups = "drop")
# Juntando com a geometria dos estados
acidentes_p_estado <- left_join(acidentes_p_estado, estados, by = c("State" = "STUSPS"))
acidentes_p_estado <- st_as_sf(acidentes_p_estado)
# Substituindo NA por 0 para estados sem acidentes
acidentes_p_estado$n[is.na(acidentes_p_estado$n)] <- 0
mapa_de_calor <- acidentes %>%
group_by(`Start Lat`, `Start Lng`) %>%
summarise(n = n(), .groups = "drop")
#| label: pré-processando as variaveis de localizacao
#| eval: false
# Alterando o nome, para não ter que alterar todas as variáveis após
acidentes_arredondado <- acidentes_US_sample
# Shapefiles
estados <- st_read("../../99_dados/Estados_US/tl_2024_us_state.shp")
# Arredondando latitudes e longitudes
acidentes_arredondado$Start_Lat <- round(acidentes_arredondado$Start_Lat,2)
acidentes_arredondado$Start_Lng <- round(acidentes_arredondado$Start_Lng,2)
# Alterando a base shp para facilitar o entendimento
nomeestados <- as.data.frame(estados) %>% select(STUSPS,NAME)
names(nomeestados) <- c("STUSPS","NOMEESTADO")
# Juntando as informações já tratadas
acidentes <- left_join(acidentes_arredondado,nomeestados, by = c("State"="STUSPS"))
acidentes_p_estado <- acidentes %>%
group_by(State, NOMEESTADO) %>%
summarise(n = n(), .groups = "drop")
# Juntando com a geometria dos estados
acidentes_p_estado <- left_join(acidentes_p_estado, estados, by = c("State" = "STUSPS"))
acidentes_p_estado <- st_as_sf(acidentes_p_estado)
# Substituindo NA por 0 para estados sem acidentes
acidentes_p_estado$n[is.na(acidentes_p_estado$n)] <- 0
mapa_de_calor <- acidentes %>%
group_by(Start_Lat, Start_Lng) %>%
summarise(n = n(), .groups = "drop")
cores <- c("white", "red", "darkred")
palestado <- colorNumeric(palette = cores, domain = c(0, max(acidentes_p_estado$n, na.rm = TRUE)))
#Agrupando valores parecidos em 'Weather Condition'.
acidentes_US_sample <- acidentes_US_sample %>%
mutate(Weather_Cluster = case_when(
grepl("Rain|Drizzle|Shower|Showers|Light Rain|Heavy Rain|Rain Showers|Light Rain Showers|Rain and Sleet|Rain Shower|Rain / Windy|Rain Showers", Weather_Condition, ignore.case = TRUE) ~ "Rain",
grepl("Snow|Blowing Snow|Light Snow|Heavy Snow|Snow Grains|Snow Showers|Snow and Thunder|Snow / Windy|Blowing Snow / Windy|Light Snow Shower|Heavy Snow / Windy|Heavy Snow with Thunder|Snow and Sleet", Weather_Condition, ignore.case = TRUE) ~ "Snow",
grepl("Thunder|Tornado|Thunderstorm|Light Thunderstorm|Heavy Thunderstorms and Rain|Thunder / Windy|Thunder / Wintry Mix|Thunderstorms and Snow|Light Thunderstorms and Snow|Heavy Thunderstorms with Small Hail", Weather_Condition, ignore.case = TRUE) ~ "Thunderstorm",
grepl("Wind|Windy|Blowing Dust|Blowing Snow|Duststorm|Dust Whirls|Blowing Dust / Windy|Widespread Dust|Sand / Windy|Windy", Weather_Condition, ignore.case = TRUE) ~ "Wind",
grepl("Fog|Haze|Shallow Fog|Patches of Fog|Mist|Light Fog|Fog / Windy|Partial Fog", Weather_Condition, ignore.case = TRUE) ~ "Fog",
grepl("Clear|Fair|Mostly Cloudy|Partly Cloudy|Overcast|Cloudy", Weather_Condition, ignore.case = TRUE) ~ "Clear",
grepl("Smoke|Volcanic Ash|Haze", Weather_Condition, ignore.case = TRUE) ~ "Hazardous",
grepl("Sleet|Ice Pellets|Freezing Rain|Light Freezing Rain|Freezing Drizzle|Light Freezing Drizzle|Heavy Freezing Rain", Weather_Condition, ignore.case = TRUE) ~ "Ice",
grepl("Squalls|Hail|Small Hail|Thunder / Wintry Mix|Hail", Weather_Condition, ignore.case = TRUE) ~ "Hail",
grepl("Mist|Blowing Snow Nearby|Sand|Blowing Snow", Weather_Condition, ignore.case = TRUE) ~ "Dust & Mist",
grepl("Volcanic Ash|Blowing Sand|Sand", Weather_Condition, ignore.case = TRUE) ~ "Dust Storm",
grepl("Fair / Windy|Fair", Weather_Condition, ignore.case = TRUE) ~ "Fair / Windy",
TRUE ~ "Other"
))
acidentes_US_sample <- acidentes_US_sample %>%
mutate(Choveu = ifelse(`Precipitation(in)` > 0, "Sim", "Não"))
#| label: pré-processando as variaveis do grupo 'Condiçoes de Infraestrutura e Sinalização'
# Seleciona as variáveis de interesse
poi <- acidentes_US_sample[, .(Severity, Start_Time, City, State, `Temperature(F)`,
Amenity, Bump, Crossing, Give_Way, Junction, No_Exit,
Railway, Roundabout, Station, Stop, Traffic_Calming,
Traffic_Signal, Turning_Loop)]
# Cria duas seleções de dados, contando a quantidade de acidentes com e sem cada ponto de interesse.
poi_true <- poi %>%
select(Amenity:Turning_Loop) %>%
pivot_longer(Amenity:Turning_Loop, names_to = "PoI") %>%
filter(value == 1) %>%
group_by(PoI) %>%
summarise(t = n()) %>%
arrange(desc(t))
poi_false <- poi %>%
select(Amenity:Turning_Loop) %>%
pivot_longer(Amenity:Turning_Loop, names_to = "PoI") %>%
filter(value == FALSE) %>%
group_by(PoI) %>%
summarise(f = n()) %>%
arrange(f)
# Cria uma nova coluna com a soma dos pontos de interesse
poi_sum <- poi[, PoI_Sum := rowSums(.SD), .SDcols = c("Amenity", "Bump","Crossing", "Give_Way", "Junction", "No_Exit", "Railway", "Roundabout", "Station",
"Stop", "Traffic_Calming",
"Traffic_Signal", "Turning_Loop")]
acidentes_US_sample <- acidentes_US_sample %>%
mutate(Duration_minutes = as.numeric(difftime(End_Time, Start_Time, units = "mins")))
#| label: analise de variaveis temporais
#| eval: false
acidentes_ano_barplot <- acidentes_US_sample_date[Civil_Twilight == "Day" | Civil_Twilight == "Night",
.(.N,
Distinct_date = uniqueN(Date),
Media_diaria = round(.N/uniqueN(Date),0)),
by = Year][
order(Year)][
, Percent_variation := round((Media_diaria - shift(Media_diaria))/shift(Media_diaria), 2)] %>%
setorder(Year) %>% # order data set increasingly by year
as.data.frame() %>% # Transforming data.table into data.frame
ggplot() +
aes(x = Year, y = N,
text = paste("Ano:", Year,
"<br>Qtd. Acidentes:", round(N/1000, 1), "k",
"<br>Disa Obs. no Ano:", Distinct_date,
"<br>Acidentes por Dia:", round(Media_diaria/1000, 1), "k")) +
geom_bar(stat = "identity", fill = "darkred") +
geom_text(aes(label = percent(Percent_variation)), size = 3) +
scale_y_continuous(
labels = label_number(scale = 1/1000, suffix = "k") # Divide por 1000 e adiciona o sufixo "k"
) +
labs(title = "Qtd. de Acidentes por Ano", x = "Ano", y = "Qtd. Acidentes") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
plotly()
acidentes_ano_barplot %>% ggplotly(tooltip = "text")
acidentes_US_date$Weekday %>% levels()
# Cria uma matriz de calor para as variaveis dias da semana e faixa horaria
acidentes_data_matriz_AWKTR <- acidentes_US_sample_date[Civil_Twilight == "Day" | Civil_Twilight == "Night", .N, by = .(Weekday, Time_Range)] %>%
setorder(Weekday, -Time_Range) %>% # order data set increasingly by weekday and time range
as.data.frame() %>% # Transforming data.table into data.frame
ggplot() +
aes(x = Weekday, y = Time_Range, fill = N) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkred") +
labs(title = "Agenda Diaria de Acidentes", x = "Dia da Semana", y = "Horario") +
theme_minimal() +
scale_x_discrete(position = "top") +
theme(
axis.title.x.top = element_text(),
axis.text.x.top = element_text(),
axis.line.x.top = element_line(),
axis.ticks.x.top = element_line()
)
acidentes_data_matriz_AWKTR
rm(list = ls())
